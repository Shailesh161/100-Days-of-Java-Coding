public class Queue {
    private static final int MAX_SIZE = 100; // Maximum size of the queue
    private int[] queueArray;
    private int front; // Index of the front element
    private int rear; // Index of the rear element
    private int size; // Current size of the queue

    // Constructor
    public Queue() {
        queueArray = new int[MAX_SIZE];
        front = 0;
        rear = -1;
        size = 0;
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Method to check if the queue is full
    public boolean isFull() {
        return size == MAX_SIZE;
    }

    // Method to add an element to the rear of the queue (enqueue operation)
    public void enqueue(int item) {
        if (isFull()) {
            System.out.println("Queue is full. Cannot enqueue.");
            return;
        }
        rear = (rear + 1) % MAX_SIZE; // Circular increment rear index
        queueArray[rear] = item; // Insert item at rear
        size++; // Increment size
        System.out.println("Enqueued: " + item);
    }

    // Method to remove an element from the front of the queue (dequeue operation)
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot dequeue.");
            return -1; // Return -1 indicating failure
        }
        int item = queueArray[front]; // Get the front element
        front = (front + 1) % MAX_SIZE; // Circular increment front index
        size--; // Decrement size
        System.out.println("Dequeued: " + item);
        return item; // Return the dequeued item
    }

    // Method to peek at the front element of the queue without removing it
    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty. Cannot peek.");
            return -1; // Return -1 indicating failure
        }
        return queueArray[front]; // Return the front element
    }

    // Method to get the current size of the queue
    public int size() {
        return size;
    }

    // Method to display the elements of the queue
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty.");
            return;
        }
        System.out.print("Queue: ");
        int count = 0;
        int index = front;
        while (count < size) {
            System.out.print(queueArray[index] + " ");
            index = (index + 1) % MAX_SIZE; // Circular increment index
            count++;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        Queue queue = new Queue();

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);

        queue.display(); // Queue: 10 20 30

        System.out.println("Front element: " + queue.peek()); // Front element: 10

        queue.dequeue(); // Dequeued: 10

        queue.display(); // Queue: 20 30
    }
}
