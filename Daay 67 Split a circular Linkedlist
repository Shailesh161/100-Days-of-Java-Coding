import java.lang.*;
public class Main
{
  public static void main (String[]args)
  {
    Main Obj = new Main ();
      Obj.add (10);
      Obj.add (20);
      Obj.add (30);
      Obj.add (40);
      Obj.add (50);
      Obj.add (60);

      System.out.println ("Original List");
      Obj.print ();

      Obj.split ();
      Obj.print (list1);
      Obj.print (list2);

  }
  public class Node
  {
    int element;
    Node next;
    Node prev;

    public Node (int element)
    {
      this.element = element;
    }
  }
  static Node list1, list2;
  public Node head = null;
  public Node tail = null;
  public void print ()
  {
    Node temp = head;
    if (head == null)
      {
	System.out.println ("null");
      }
    else
      {
	do
	  {
	    System.out.print (" " + temp.element);
	    temp = temp.next;
	  }
	while (temp != head);
	System.out.println ();
      }
  }

  public void add (int element)
  {
    Node newNode = new Node (element);
    if (head == null)
      {
	head = newNode;
	tail = newNode;
	newNode.next = head;
	newNode.prev = head;
      }
    else
      {
	tail.next = newNode;
	newNode.prev = tail;
	tail = newNode;
	tail.next = head;
      }
  }
  public void print (Node head)
  {
    Node current = head;
    if (head == null)
      {
	System.out.println ("Empty List");
      }
    else
      {
	System.out.println ("Circular Linked List is");
	do
	  {
	    //Prints each node by incrementing pointer.
	    System.out.print (" " + current.element);
	    current = current.next;
	  }
	while (current != head);
	System.out.println ();
      }
  }

  public void split ()
  {
    Node l1 = head;
    Node l2 = head;
    for (int i = 0; l2.next != head && l2.next.next != head; i++)
      {
	l2 = l2.next.next;
	l1 = l1.next;
      }
    if (l2.next.next == head)
      {
	l2 = l2.next;
      }
    list1 = head;

    if (head.next != head)
      {
	list2 = l1.next;
      }
    l2.next = l1.next;
    l1.next = head;
  }
}
