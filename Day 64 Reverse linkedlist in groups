public class Main
{

  public static void main (String[]args) throws Exception
  {
    LinkedList ll = new LinkedList ();
      ll.addFirst (51);
      ll.addFirst (35);
      ll.addFirst (27);
      ll.addFirst (15);
      ll.addFirst (11);

      System.out.println ("Linked List before reversing");
      ll.display ();

      System.out.println (" ");

      ll.kReverse (2);

      System.out.println ("Linked List after reversing");

      ll.display ();

  }

}

class LinkedList
{
  private class Node
  {
    int data;
    Node next;

// Node constructor
// There are two fields in the node- data and address of next node
    public Node (int data, Node next)
    {
      this.data = data;
      this.next = next;
    }
  }

  private Node head;
  private Node tail;
  private int size;

  public LinkedList ()
  {
    this.head = null;
    this.tail = null;
    this.size = 0;

  }

// Function to find the size of linked list
  public int size ()
  {
    return this.size;
  }

// Function to check whether linked list is empty or not
  public boolean isEmpty ()
  {
    return this.size () == 0;
  }

// Function to traverse and print the linked list
  public void display ()
  {
    Node temp = head;
    while (temp != null)
      {
	System.out.print (temp.data + "  ");

	temp = temp.next;
      }
    System.out.println ("END");
  }

// Function to add a node in beginning of linked list
  public void addFirst (int item)
  {
// Create a temp node which points to head
    Node temp = new Node (item, head);

// If linked list is empty, temp is the head and tail node both
    if (this.size == 0)
      {
	this.head = this.tail = temp;
      }

// else set the head such that it now points to temp node
    else
      {
	this.head = temp;

      }

    this.size++;
  }

  public int removeFirst () throws Exception
  {
    if (this.size () == 0)
      {
	throw new Exception ("Linked list is empty");
      }

    int rv = this.head.data;

    if (this.size () == 1)
      {
	this.head = this.tail = null;
      }
    else
      {
	this.head = this.head.next;
      }

    this.size--;
    return rv;
  }

// Function to reverse every k nodes
  public void kReverse (int k) throws Exception
  {

    LinkedList curr = null, klist = null;

    while (!this.isEmpty ())
      {
	curr = new LinkedList ();
	for (int i = 0; i < k && !this.isEmpty (); i++)
	  {

// Remove from the linked list and add First in curr linked list
	    curr.addFirst (this.removeFirst ());

	  }

// If klist is null then curr becomes the klist
	if (klist == null)
	  {
	    klist = curr;
	  }
	else
	  {

	    klist.tail.next = curr.head;
	    klist.tail = curr.tail;
	    klist.size = klist.size + curr.size ();
	  }
      }

// Make changes in head, tail and size of current linked list
    this.head = klist.head;
    this.tail = klist.tail;
    this.size = klist.size ();

  }
}
